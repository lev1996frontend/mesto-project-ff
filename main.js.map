{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js"],"sourcesContent":["const config = {\n    baseUrl: 'https://mesto.nomoreparties.co/v1/wff-cohort-18',\n    headers: {\n        authorization: '9cfe8ba5-4a8f-48c8-a36e-8500fb2455cf',\n        'Content-Type': 'application/json',\n    },\n}\n//функция обрабатывает ответ от сервера\nconst getResponseData = (res) => {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`)\n}\n//функция, которая получает информацию о пользователе\nconst getInitialCards = () => {\n    return fetch(config.baseUrl + '/cards', {\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция, которая получает информацию о пользователе\nconst getUserInfo = () => {\n    return fetch(config.baseUrl + '/users/me', {\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция, которая выполняет запросы для получения информации о пользователе и карточках одновременно, используя Promise.all.\nconst getInitialInfo = () => {\n    return Promise.all([getUserInfo(), getInitialCards()])\n}\n//функция для обновления профиля пользователя\nconst updateUserProfile = (userProfileData) => {\n    return fetch(config.baseUrl + '/users/me', {\n        method: 'PATCH',\n        headers: config.headers,\n        body: JSON.stringify({\n            name: userProfileData.name,\n            about: userProfileData.about,\n        }),\n    }).then((res) => getResponseData(res))\n}\n//функция для добавления новой карточки\nconst postNewCard = (cardData) => {\n    return fetch(config.baseUrl + '/cards', {\n        method: 'POST',\n        headers: config.headers,\n        body: JSON.stringify({\n            name: cardData.name,\n            link: cardData.link,\n        }),\n    }).then((res) => getResponseData(res))\n}\n//функция для установки лайка на карточку\nconst putLike = (cardId) => {\n    return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\n        method: 'PUT',\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция для удаления лайка с карточки.\nconst deleteLike = (cardId) => {\n    return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\n        method: 'DELETE',\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n// функция для удаления карточки\nconst deleteCard = (cardId) => {\n    return fetch(config.baseUrl + `/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция для обновления аватара пользователя\nconst updateUserAvatar = (avatarLink) => {\n    return fetch(config.baseUrl + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: config.headers,\n        body: JSON.stringify({\n            avatar: avatarLink,\n        }),\n    }).then((res) => getResponseData(res))\n}\n\nexport {\n    getInitialCards,\n    getUserInfo,\n    getInitialInfo,\n    updateUserProfile,\n    postNewCard,\n    putLike,\n    deleteLike,\n    deleteCard,\n    updateUserAvatar,\n}\n","import '../pages/index.css'\nimport { likeCard, createCard } from './card'\nimport { closeModal, openModal, closeModalOnOverlay } from './modal'\nimport { clearValidation, enableValidation } from './validation'\nimport {\n    getInitialCards,\n    getInitialInfo,\n    postNewCard,\n    updateUserAvatar,\n    updateUserProfile,\n    deleteCard as deleteCardFromServer,\n} from './api'\n\nconst placesList = document.querySelector('.places__list')\nconst popupProfile = document.querySelector('.popup_type_edit')\nconst popupProfileForm = document.forms['edit-profile']\nconst profileTitle = document.querySelector('.profile__title')\nconst profileDescription = document.querySelector('.profile__description')\nconst profileAvatar = document.querySelector('.profile__image')\nconst profileEditButton = document.querySelector('.profile__edit-button')\nconst newCardButton = document.querySelector('.profile__add-button')\nconst popupNewCard = document.querySelector('.popup_type_new-card')\nconst popupNewCardForm = document.forms['new-place']\nconst popupImageElement = document.querySelector('.popup_type_image')\nconst popupImage = popupImageElement.querySelector('.popup__image')\nconst popupCaption = popupImageElement.querySelector('.popup__caption')\nconst popupAvatar = document.querySelector('.popup_type_avatar')\nconst popupAvatarForm = document.forms['edit-avatar']\nconst avatarEditButton = document.querySelector('.profile__image-container')\nconst popupConfirm = document.querySelector('.popup_type_confirm')\nconst popupConfirmButton = popupConfirm.querySelector('.popup__button')\n\n//селекторы для форм, полей ввода и кнопок, а также классы для стилизации ошибок\nconst validationConfig = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n}\nlet userId\nlet cardToDelete = null\n\n//удаление карточек\nconst deleteCard = (evt, cardId) => {\n  cardToDelete = evt.target.closest('.card');\n  openModal(popupConfirm);\n  popupConfirm.dataset.cardId = cardId;\n}\n\n// рендеринг\nconst renderCard = (\n  item,\n  userId,\n  container,\n  likeCard,\n  deleteCard,\n  openFullImageFn,\n  place = 'end'\n) => {\n  const cardElement = createCard(\n      item,\n      userId,\n      deleteCard,\n      likeCard,\n      openFullImageFn\n  );\n  if (place === 'end') {\n      container.append(cardElement);\n  } else {\n      container.prepend(cardElement);\n  }\n}\n\n//Изменяет текст кнопки в зависимости от состояния загрузки\nconst renderLoading = (isLoading, button) => {\n    button.textContent = isLoading ? 'Сохранение...' : 'Сохранить'\n}\n//Заполняет информацию профиля (имя, описание, аватар).\nconst fillProfileInfo = (userInfo) => {\n    profileTitle.textContent = userInfo.name\n    profileDescription.textContent = userInfo.about\n    profileAvatar.style.backgroundImage = `url(${userInfo.avatar})`\n}\n\n//Подготавливает форму редактирования профиля, выставляя в нее имеющиеся значения.\nconst fillProfilePopup = (form, name, description) => {\n    form.elements.name.value = name\n    form.elements.description.value = description\n}\npopupImageElement.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n//Отображает исходные карточки на странице.\nconst renderInitialCards = (initialCards, userId) => {\n    initialCards.forEach((card) => {\n        renderCard(\n            card,\n            userId,\n            placesList,\n            likeCard,\n            deleteCard,\n            openImagePopup\n        )\n    })\n}\n// Открывает модальное окно с изображением\nconst openImagePopup = (imageData) => {\n    popupImage.src = imageData.src\n    popupImage.alt = imageData.alt\n    popupCaption.textContent = imageData.title\n    openModal(popupImageElement)\n}\n//Подтверждает удаление карточки после запроса к серверу\nconst handleConfirmDelete = (evt) => {\n  const cardId = popupConfirm.dataset.cardId;\n  deleteCardFromServer(cardId)\n      .then((result) => {\n          if (cardToDelete) {\n              cardToDelete.remove();\n              cardToDelete = null;\n          }\n          closeModal(popupConfirm);\n      })\n      .catch((err) => {\n          console.log(err);\n      });\n}\n//Обрабатывает отправку формы редактирования профиля и обновляет информацию\nconst handleProfileFormSubmit = (evt) => {\n    evt.preventDefault()\n    renderLoading(true, popupProfileForm.querySelector('.popup__button'))\n    updateUserProfile({\n        name: popupProfileForm.name.value,\n        about: popupProfileForm.description.value,\n    })\n        .then((updatedProfile) => {\n            fillProfileInfo(updatedProfile)\n            closeModal(popupProfile)\n            clearValidation(popupProfileForm, validationConfig)\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n        .finally(() => {\n            renderLoading(\n                false,\n                popupProfileForm.querySelector('.popup__button')\n            )\n        })\n}\n//Обрабатывает отправку формы для изменения аватара.\nconst handleAvatarFormSubmit = (evt) => {\n    evt.preventDefault()\n    renderLoading(true, popupAvatarForm.querySelector('.popup__button'))\n    updateUserAvatar(popupAvatarForm.link.value)\n        .then((updatedProfile) => {\n            fillProfileInfo(updatedProfile)\n            closeModal(popupAvatar)\n            clearValidation(popupAvatarForm, validationConfig)\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n        .finally(() => {\n            renderLoading(\n                false,\n                popupAvatarForm.querySelector('.popup__button')\n            )\n        })\n}\n//Обрабатывает отправку формы для добавления новой карточки\nconst handleNewCardFormSubmit = (evt) => {\n  evt.preventDefault();\n  renderLoading(true, popupNewCardForm.querySelector('.popup__button'));\n  const name = popupNewCardForm.elements['place-name'].value;\n  const link = popupNewCardForm.elements.link.value;\n  postNewCard({ name, link })\n      .then((newCard) => {\n          renderCard(\n              newCard,\n              userId,\n              placesList,\n              likeCard,\n              deleteCard,\n              openImagePopup,\n              'start'\n          );\n          closeModal(popupNewCard);\n          popupNewCardForm.reset();\n      })\n      .catch((err) => {\n          console.log(err);\n      })\n      .finally(() => {\n          renderLoading(\n              false,\n              popupNewCardForm.querySelector('.popup__button')\n          );\n      });\n};\n\nprofileEditButton.addEventListener('click', () => {\n    clearValidation(popupProfileForm, validationConfig)\n    fillProfilePopup(\n        popupProfileForm,\n        profileTitle.textContent,\n        profileDescription.textContent\n    )\n    openModal(popupProfile)\n})\n// Обрабатывает отправку формы профиля, вызывая функцию handleProfileFormSubmit для обработки данных, введённых пользователем\npopupProfileForm.addEventListener('submit', handleProfileFormSubmit)\n//  Закрытие модального окна профиля\npopupProfile.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n//Очистит валидацию формы аватара, сбросит её данные и откроет модальное окно для редактирования аватара\navatarEditButton.addEventListener('click', (evt) => {\n    clearValidation(popupAvatarForm, validationConfig)\n    popupAvatarForm.reset()\n    openModal(popupAvatar)\n})\n//Обрабатывает отправку формы изменения аватара, вызывая функцию\npopupAvatarForm.addEventListener('submit', handleAvatarFormSubmit)\n//Закрывает окно изменения аватара при клике на оверлей.\npopupAvatar.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n// Очищает и открывает форму для создания новой карточки, обеспечивая валидацию\nnewCardButton.addEventListener('click', () => {\n    popupNewCardForm.reset()\n    clearValidation(popupNewCardForm, validationConfig)\n    openModal(popupNewCard)\n})\n//Закрывает окно добавления новой карточки при клике на оверлей.\npopupNewCardForm.addEventListener('submit', handleNewCardFormSubmit)\n// Закрывает окно подтверждения удаления карточки при клике на оверлей\npopupNewCard.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n// Обрабатывает удаление карточки при нажатии кнопки подтверждения\npopupConfirm.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\npopupConfirmButton.addEventListener('click', handleConfirmDelete)\n\n// Обработка закрытия модального окна\nconst popupCloseButtons = document.querySelectorAll('.popup__close')\npopupCloseButtons.forEach((button) => {\n    button.addEventListener('click', (evt) => {\n        closeModal(evt.target.closest('.popup')) // Закрываем попап, связанный с кнопкой закрытия\n    })\n})\n//  Асинхронно получает начальную информацию о пользователе и карточках\ngetInitialInfo()\n    .then((result) => {\n        const userInfo = result[0]\n        userId = userInfo._id\n        const initialCards = result[1]\n        fillProfileInfo(userInfo)\n        renderInitialCards(initialCards, userId)\n    })\n    .catch((err) => {\n        console.log(err)\n    })\n\nenableValidation(validationConfig)\n","import { deleteLike, putLike } from './api'\n\n//селекторы, вынес для наименьшего запроса к дом\nconst cardTemplate = document.querySelector('#card-template').content\n\n// переделал функции, упростил их через функциональное выражение\nconst likeCard = (evt, cardId) => {\n    const currentLikes = evt.target\n        .closest('.card')\n        .querySelector('.card__like-count')\n\n    if (evt.target.classList.contains('card__like-button_is-active')) {\n        deleteLike(cardId)\n            .then((updatedCard) => {\n                evt.target.classList.remove('card__like-button_is-active')\n                currentLikes.textContent = updatedCard.likes.length\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    } else {\n        putLike(cardId)\n            .then((updatedCard) => {\n                evt.target.classList.add('card__like-button_is-active')\n                currentLikes.textContent = updatedCard.likes.length\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n}\n\n// создание карточек\nexport const createCard = (\n    cardData,\n    userId,\n    deleteCardFn,\n    likeCardFn,\n    openFullImageFn\n) => {\n    const cardElement = cardTemplate.querySelector('.card').cloneNode(true)\n    const cardDeleteButton = cardElement.querySelector('.card__delete-button')\n    const cardLikeButton = cardElement.querySelector('.card__like-button')\n    const cardImage = cardElement.querySelector('.card__image')\n    const cardTitle = cardElement.querySelector('.card__title')\n    const cardLikeCount = cardElement.querySelector('.card__like-count')\n\n    // использую id для удаления карточки, напрямую не понимаю как передать, старый вариант удалил\n    cardImage.src = cardData.link\n    cardImage.alt = cardData.name\n    cardTitle.textContent = cardData.name\n\n    // рендер лайков\n    cardLikeCount.textContent = cardData.likes.length\n    const isLiked = cardData.likes.some((like) => like._id === userId)\n    if (isLiked) {\n        cardLikeButton.classList.add('card__like-button_is-active')\n    }\n\n    // удаление карточек\n    if (cardData.owner._id === userId) {\n        cardDeleteButton.addEventListener('click', (evt) => {\n            deleteCardFn(evt, cardData._id)\n        })\n    } else {\n        cardDeleteButton.remove()\n    }\n\n    // лайк карточки\n    cardLikeButton.addEventListener('click', (evt) => {\n        likeCardFn(evt, cardData._id)\n    })\n\n    // картинка попапа\n    cardImage.addEventListener('click', () => {\n        openFullImageFn({\n            src: cardData.link,\n            alt: cardData.name,\n            title: cardData.name,\n        })\n    })\n\n    return cardElement\n}\n\nexport { likeCard }\n","const openModal = (element) => {\n  element.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", closeModalOnEscape);\n};\n\nconst closeModal = (element) => {\n  element.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", closeModalOnEscape);\n};\n\nconst closeModalOnEscape = (evt) => {\n  if (evt.key === \"Escape\") {\n    const currentPopup = document.querySelector(\".popup_is-opened\");\n    closeModal(currentPopup);\n  }\n};\n\nconst closeModalOnOverlay = (evt) => {\n  if (evt.target === evt.currentTarget) {\n    closeModal(evt.currentTarget);\n  }\n};\n\nexport { openModal, closeModal, closeModalOnOverlay };\n","// функции работы с валидацией, переделал согласно чек-листу\n// функция инициализирует процесс валидации всех форм\nconst enableValidation = (validationConfig) => {\n  const formList = Array.from(\n      document.querySelectorAll(validationConfig.formSelector)\n  );\n  formList.forEach((formElement) => {\n      setEventListeners(\n          formElement,\n          validationConfig.inputSelector,\n          validationConfig.inputErrorClass,\n          validationConfig.errorClass,\n          validationConfig.submitButtonSelector,\n          validationConfig.inactiveButtonClass\n      );\n  });\n};\n//Выводит сообщение об ошибке для конкретного поля ввода\nconst showInputError = (\n  formElement,\n  inputElement,\n  errorMessage,\n  inputErrorClass,\n  errorClass\n) => {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`)\n  inputElement.classList.add(inputErrorClass)\n  errorElement.textContent = errorMessage\n  errorElement.classList.add(errorClass)\n}\n//Скрывает сообщение об ошибке для конкретного поля ввода\nconst hideInputError = (\n  formElement,\n  inputElement,\n  inputErrorClass,\n  errorClass\n) => {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`)\n  inputElement.classList.remove(inputErrorClass)\n  errorElement.textContent = ''\n  errorElement.classList.remove(errorClass)\n}\n//Проверяет актуальность значения поля ввода\nconst checkInputValidity = (\n  formElement,\n  inputElement,\n  inputErrorClass,\n  errorClass\n) => {\n  if (inputElement.validity.patternMismatch) {\n      inputElement.setCustomValidity(inputElement.dataset.errorMessage)\n  } else {\n      inputElement.setCustomValidity('')\n  }\n\n  if (!inputElement.validity.valid) {\n      showInputError(\n          formElement,\n          inputElement,\n          inputElement.validationMessage,\n          inputErrorClass,\n          errorClass\n      )\n  } else {\n      hideInputError(formElement, inputElement, inputErrorClass, errorClass)\n  }\n}\n//обавляет слушатели событий для каждого поля ввода формы\nconst setEventListeners = (\n  formElement,\n  inputSelector,\n  inputErrorClass,\n  errorClass,\n  submitButtonSelector,\n  inactiveButtonClass\n) => {\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector))\n  const buttonElement = formElement.querySelector(submitButtonSelector)\n  toggleButtonState(inputList, buttonElement, inactiveButtonClass)\n  inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n          checkInputValidity(\n              formElement,\n              inputElement,\n              inputErrorClass,\n              errorClass\n          )\n          toggleButtonState(inputList, buttonElement, inactiveButtonClass)\n      })\n  })\n}\n//Проверяет, есть ли невалидные поля ввода в списке. Возвращает true, если хотя бы одно поле невалидно\nconst hasInvalidInput = (inputList) => {\n  return inputList.some((inputElement) => {\n      return !inputElement.validity.valid\n  })\n}\n//Изменяет состояние кнопки отправки формы на основе валидности всех полей ввода\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\n  if (hasInvalidInput(inputList)) {\n      buttonElement.classList.add(inactiveButtonClass)\n      buttonElement.disabled = true\n  } else {\n      buttonElement.classList.remove(inactiveButtonClass)\n      buttonElement.disabled = false\n  }\n}\n//Очищает валидацию для формы, скрывая все ошибки и сбрасывая состояние поля ввода\nconst clearValidation = (formElement, validationConfig) => {\n  const inputList = Array.from(\n      formElement.querySelectorAll(validationConfig.inputSelector)\n  );\n  const buttonElement = formElement.querySelector(\n      validationConfig.submitButtonSelector\n  );\n  buttonElement.classList.add(validationConfig.inactiveButtonClass);\n  buttonElement.disabled = true; // Добавляем отключение кнопки отправки\n\n  inputList.forEach((inputElement) => {\n      hideInputError(\n          formElement,\n          inputElement,\n          validationConfig.inputErrorClass,\n          validationConfig.errorClass\n      );\n      inputElement.setCustomValidity('');\n  });\n};\n\n\nexport { enableValidation, clearValidation }\n"],"names":["userId","config","baseUrl","headers","authorization","getResponseData","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","likeCard","evt","cardId","currentLikes","target","closest","classList","contains","fetch","method","then","deleteLike","updatedCard","remove","textContent","likes","length","catch","err","console","log","putLike","add","openModal","element","addEventListener","closeModalOnEscape","closeModal","removeEventListener","key","currentPopup","closeModalOnOverlay","currentTarget","hideInputError","formElement","inputElement","inputErrorClass","errorClass","errorElement","id","toggleButtonState","inputList","buttonElement","inactiveButtonClass","some","validity","valid","hasInvalidInput","disabled","clearValidation","validationConfig","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","setCustomValidity","placesList","popupProfile","popupProfileForm","forms","profileTitle","profileDescription","profileAvatar","profileEditButton","newCardButton","popupNewCard","popupNewCardForm","popupImageElement","popupImage","popupCaption","popupAvatar","popupAvatarForm","avatarEditButton","popupConfirm","popupConfirmButton","formSelector","cardToDelete","deleteCard","dataset","renderCard","item","container","openFullImageFn","place","arguments","undefined","cardElement","cardData","deleteCardFn","likeCardFn","cloneNode","cardDeleteButton","cardLikeButton","cardImage","cardTitle","cardLikeCount","src","link","alt","name","like","_id","owner","title","createCard","append","prepend","renderLoading","isLoading","button","fillProfileInfo","userInfo","about","style","backgroundImage","avatar","openImagePopup","imageData","form","description","elements","value","userProfileData","preventDefault","body","JSON","stringify","updatedProfile","finally","reset","avatarLink","newCard","result","all","initialCards","card","renderInitialCards","patternMismatch","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","enableValidation"],"sourceRoot":""}