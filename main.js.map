{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/index.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js"],"sourcesContent":["const config = {\n    baseUrl: 'https://mesto.nomoreparties.co/v1/wff-cohort-18',\n    headers: {\n        authorization: '9cfe8ba5-4a8f-48c8-a36e-8500fb2455cf',\n        'Content-Type': 'application/json',\n    },\n}\n//функция обрабатывает ответ от сервера\nconst getResponseData = (res) => {\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`)\n}\n//функция, которая получает информацию о пользователе\nconst getInitialCards = () => {\n    return fetch(config.baseUrl + '/cards', {\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция, которая получает информацию о пользователе\nconst getUserInfo = () => {\n    return fetch(config.baseUrl + '/users/me', {\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция, которая выполняет запросы для получения информации о пользователе и карточках одновременно, используя Promise.all.\nconst getInitialInfo = () => {\n    return Promise.all([getUserInfo(), getInitialCards()])\n}\n//функция для обновления профиля пользователя\nconst updateUserProfile = (userProfileData) => {\n    return fetch(config.baseUrl + '/users/me', {\n        method: 'PATCH',\n        headers: config.headers,\n        body: JSON.stringify({\n            name: userProfileData.name,\n            about: userProfileData.about,\n        }),\n    }).then((res) => getResponseData(res))\n}\n//функция для добавления новой карточки\nconst postNewCard = (cardData) => {\n    return fetch(config.baseUrl + '/cards', {\n        method: 'POST',\n        headers: config.headers,\n        body: JSON.stringify({\n            name: cardData.name,\n            link: cardData.link,\n        }),\n    }).then((res) => getResponseData(res))\n}\n//функция для установки лайка на карточку\nconst putLike = (cardId) => {\n    return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\n        method: 'PUT',\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция для удаления лайка с карточки.\nconst deleteLike = (cardId) => {\n    return fetch(config.baseUrl + `/cards/likes/${cardId}`, {\n        method: 'DELETE',\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n// функция для удаления карточки\nconst deleteCard = (cardId) => {\n    return fetch(config.baseUrl + `/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: config.headers,\n    }).then((res) => getResponseData(res))\n}\n//функция для обновления аватара пользователя\nconst updateUserAvatar = (avatarLink) => {\n    return fetch(config.baseUrl + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: config.headers,\n        body: JSON.stringify({\n            avatar: avatarLink,\n        }),\n    }).then((res) => getResponseData(res))\n}\n\nexport {\n    getInitialCards,\n    getUserInfo,\n    getInitialInfo,\n    updateUserProfile,\n    postNewCard,\n    putLike,\n    deleteLike,\n    deleteCard,\n    updateUserAvatar,\n}\n","import '../pages/index.css'\nimport { likeCard, createCard } from './card'\nimport { closeModal, openModal, closeModalOnOverlay } from './modal'\nimport { clearValidation, enableValidation } from './validation'\nimport {\n    getInitialInfo,\n    postNewCard,\n    updateUserAvatar,\n    updateUserProfile,\n    deleteCard as deleteCardFromServer,\n} from './api'\n\nconst placesList = document.querySelector('.places__list')\nconst popupProfile = document.querySelector('.popup_type_edit')\nconst popupProfileForm = document.forms['edit-profile']\nconst profileTitle = document.querySelector('.profile__title')\nconst profileDescription = document.querySelector('.profile__description')\nconst profileAvatar = document.querySelector('.profile__image')\nconst profileEditButton = document.querySelector('.profile__edit-button')\nconst newCardButton = document.querySelector('.profile__add-button')\nconst popupNewCard = document.querySelector('.popup_type_new-card')\nconst popupNewCardForm = document.forms['new-place']\nconst popupImageElement = document.querySelector('.popup_type_image')\nconst popupImage = popupImageElement.querySelector('.popup__image')\nconst popupCaption = popupImageElement.querySelector('.popup__caption')\nconst popupAvatar = document.querySelector('.popup_type_avatar')\nconst popupAvatarForm = document.forms['edit-avatar']\nconst avatarEditButton = document.querySelector('.profile__image-container')\nconst popupConfirm = document.querySelector('.popup_type_confirm')\nconst popupConfirmButton = popupConfirm.querySelector('.popup__button')\n\n//селекторы для форм, полей ввода и кнопок, а также классы для стилизации ошибок\nconst validationConfig = {\n    formSelector: '.popup__form',\n    inputSelector: '.popup__input',\n    submitButtonSelector: '.popup__button',\n    inactiveButtonClass: 'popup__button_disabled',\n    inputErrorClass: 'popup__input_type_error',\n    errorClass: 'popup__error_visible',\n}\nlet userId\nlet cardToDelete = null\nlet cardIdToDelete = null\n\n//удаление карточек\nconst deleteCard = (evt, cardId) => {\n  cardToDelete = evt.target.closest('.card');\n  cardIdToDelete = cardId\n  openModal(popupConfirm);\n}\n\n// рендеринг\nconst renderCard = (\n  item,\n  userId,\n  container,\n  likeCard,\n  deleteCard,\n  openFullImageFn,\n  place = 'end'\n) => {\n  const cardElement = createCard(\n      item,\n      userId,\n      deleteCard,\n      likeCard,\n      openFullImageFn\n  );\n  if (place === 'end') {\n      container.append(cardElement);\n  } else {\n      container.prepend(cardElement);\n  }\n}\n\n//Изменяет текст кнопки в зависимости от состояния загрузки\nconst renderLoading = (isLoading, button) => {\n    button.textContent = isLoading ? 'Сохранение...' : 'Сохранить'\n}\n//Заполняет информацию профиля (имя, описание, аватар).\nconst fillProfileInfo = (userInfo) => {\n    profileTitle.textContent = userInfo.name\n    profileDescription.textContent = userInfo.about\n    profileAvatar.style.backgroundImage = `url(${userInfo.avatar})`\n}\n\n//Подготавливает форму редактирования профиля, выставляя в нее имеющиеся значения.\nconst fillProfilePopup = (form, name, description) => {\n    form.elements.name.value = name\n    form.elements.description.value = description\n}\npopupImageElement.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n//Отображает исходные карточки на странице.\nconst renderInitialCards = (initialCards, userId) => {\n    initialCards.forEach((card) => {\n        renderCard(\n            card,\n            userId,\n            placesList,\n            likeCard,\n            deleteCard,\n            openImagePopup\n        )\n    })\n}\n// Открывает модальное окно с изображением\nconst openImagePopup = (imageData) => {\n    popupImage.src = imageData.src\n    popupImage.alt = imageData.alt\n    popupCaption.textContent = imageData.title\n    openModal(popupImageElement)\n}\n//Подтверждает удаление карточки после запроса к серверу\nconst handleConfirmDelete = (evt) => {\n  deleteCardFromServer(cardIdToDelete)\n      .then((result) => {\n          if (cardToDelete) {\n              cardToDelete.remove();\n              cardToDelete = null;\n              cardIdToDelete = null;\n          }\n          closeModal(popupConfirm);\n      })\n      .catch((err) => {\n          console.log(err);\n      });\n}\n//Обрабатывает отправку формы редактирования профиля и обновляет информацию\nconst handleProfileFormSubmit = (evt) => {\n    evt.preventDefault()\n    renderLoading(true, popupProfileForm.querySelector('.popup__button'))\n    updateUserProfile({\n        name: popupProfileForm.name.value,\n        about: popupProfileForm.description.value,\n    })\n        .then((updatedProfile) => {\n            fillProfileInfo(updatedProfile)\n            closeModal(popupProfile)\n            clearValidation(popupProfileForm, validationConfig)\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n        .finally(() => {\n            renderLoading(\n                false,\n                popupProfileForm.querySelector('.popup__button')\n            )\n        })\n}\n//Обрабатывает отправку формы для изменения аватара.\nconst handleAvatarFormSubmit = (evt) => {\n    evt.preventDefault()\n    renderLoading(true, popupAvatarForm.querySelector('.popup__button'))\n    updateUserAvatar(popupAvatarForm.link.value)\n        .then((updatedProfile) => {\n            fillProfileInfo(updatedProfile)\n            closeModal(popupAvatar)\n            clearValidation(popupAvatarForm, validationConfig)\n        })\n        .catch((err) => {\n            console.log(err)\n        })\n        .finally(() => {\n            renderLoading(\n                false,\n                popupAvatarForm.querySelector('.popup__button')\n            )\n        })\n}\n//Обрабатывает отправку формы для добавления новой карточки\nconst handleNewCardFormSubmit = (evt) => {\n  evt.preventDefault();\n  renderLoading(true, popupNewCardForm.querySelector('.popup__button'));\n  const name = popupNewCardForm.elements['place-name'].value;\n  const link = popupNewCardForm.elements.link.value;\n  postNewCard({ name, link })\n      .then((newCard) => {\n          renderCard(\n              newCard,\n              userId,\n              placesList,\n              likeCard,\n              deleteCard,\n              openImagePopup,\n              'start'\n          );\n          closeModal(popupNewCard);\n          popupNewCardForm.reset();\n      })\n      .catch((err) => {\n          console.log(err);\n      })\n      .finally(() => {\n          renderLoading(\n              false,\n              popupNewCardForm.querySelector('.popup__button')\n          );\n      });\n};\n\nprofileEditButton.addEventListener('click', () => {\n  fillProfilePopup(\n      popupProfileForm,\n      profileTitle.textContent,\n      profileDescription.textContent\n  );\n  clearValidation(popupProfileForm, validationConfig);\n  openModal(popupProfile);\n});\n// Обрабатывает отправку формы профиля, вызывая функцию handleProfileFormSubmit для обработки данных, введённых пользователем\npopupProfileForm.addEventListener('submit', handleProfileFormSubmit)\n//  Закрытие модального окна профиля\npopupProfile.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n//Очистит валидацию формы аватара, сбросит её данные и откроет модальное окно для редактирования аватара\navatarEditButton.addEventListener('click', (evt) => {\n    clearValidation(popupAvatarForm, validationConfig)\n    popupAvatarForm.reset()\n    openModal(popupAvatar)\n})\n//Обрабатывает отправку формы изменения аватара, вызывая функцию\npopupAvatarForm.addEventListener('submit', handleAvatarFormSubmit)\n//Закрывает окно изменения аватара при клике на оверлей.\npopupAvatar.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n// Очищает и открывает форму для создания новой карточки, обеспечивая валидацию\nnewCardButton.addEventListener('click', () => {\n    popupNewCardForm.reset()\n    clearValidation(popupNewCardForm, validationConfig)\n    openModal(popupNewCard)\n})\n//Закрывает окно добавления новой карточки при клике на оверлей.\npopupNewCardForm.addEventListener('submit', handleNewCardFormSubmit)\n// Закрывает окно подтверждения удаления карточки при клике на оверлей\npopupNewCard.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\n// Обрабатывает удаление карточки при нажатии кнопки подтверждения\npopupConfirm.addEventListener('click', (evt) => {\n    closeModalOnOverlay(evt)\n})\n\npopupConfirmButton.addEventListener('click', handleConfirmDelete)\n\n// Обработка закрытия модального окна\nconst popupCloseButtons = document.querySelectorAll('.popup__close')\npopupCloseButtons.forEach((button) => {\n    button.addEventListener('click', (evt) => {\n        closeModal(evt.target.closest('.popup')) // Закрываем попап, связанный с кнопкой закрытия\n    })\n})\n//  Асинхронно получает начальную информацию о пользователе и карточках\ngetInitialInfo()\n    .then((result) => {\n        const userInfo = result[0]\n        userId = userInfo._id\n        const initialCards = result[1]\n        fillProfileInfo(userInfo)\n        renderInitialCards(initialCards, userId)\n    })\n    .catch((err) => {\n        console.log(err)\n    })\n\nenableValidation(validationConfig)\n","import { deleteLike, putLike } from './api'\n\n// Селекторы, вынес для минимизации запросов к DOM\nconst cardTemplate = document.querySelector('#card-template').content\n\n// Функция для обработки лайков, упрощена через функциональное выражение\nconst likeCard = (likeButton, likeCountElement, cardId) => {\n    if (likeButton.classList.contains('card__like-button_is-active')) {\n        deleteLike(cardId)\n            .then((res) => {\n                likeButton.classList.remove('card__like-button_is-active')\n                likeCountElement.textContent = res.likes.length\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    } else {\n        putLike(cardId)\n            .then((res) => {\n                likeButton.classList.add('card__like-button_is-active')\n                likeCountElement.textContent = res.likes.length\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n}\n\n// Создание карточек\nexport const createCard = (\n    cardData,\n    userId,\n    deleteCardFn,\n    likeCard,\n    openFullImageFn\n) => {\n    const cardElement = cardTemplate.querySelector('.card').cloneNode(true)\n    const cardDeleteButton = cardElement.querySelector('.card__delete-button')\n    const cardLikeButton = cardElement.querySelector('.card__like-button')\n    const cardImage = cardElement.querySelector('.card__image')\n    const cardTitle = cardElement.querySelector('.card__title')\n    const cardLikeCount = cardElement.querySelector('.card__like-count')\n\n    // Установка данных карточки\n    cardImage.src = cardData.link\n    cardImage.alt = cardData.name\n    cardTitle.textContent = cardData.name\n\n    // Рендер лайков\n    cardLikeCount.textContent = cardData.likes.length\n    const isLiked = cardData.likes.some((like) => like._id === userId)\n    if (isLiked) {\n        cardLikeButton.classList.add('card__like-button_is-active')\n    }\n\n    // Удаление карточек\n    if (cardData.owner._id === userId) {\n        cardDeleteButton.addEventListener('click', (evt) => {\n            deleteCardFn(evt, cardData._id)\n        })\n    } else {\n        cardDeleteButton.remove()\n    }\n\n    // Лайк карточки\n    cardLikeButton.addEventListener('click', () =>\n        likeCard(cardLikeButton, cardLikeCount, cardData._id)\n    )\n\n    // Попап с картинкой\n    cardImage.addEventListener('click', () => {\n        openFullImageFn({\n            src: cardData.link,\n            alt: cardData.name,\n            title: cardData.name,\n        })\n    })\n\n    return cardElement\n}\n\nexport { likeCard }\n","const openModal = (element) => {\n  element.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", closeModalOnEscape);\n};\n\nconst closeModal = (element) => {\n  element.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", closeModalOnEscape);\n};\n\nconst closeModalOnEscape = (evt) => {\n  if (evt.key === \"Escape\") {\n    const currentPopup = document.querySelector(\".popup_is-opened\");\n    closeModal(currentPopup);\n  }\n};\n\nconst closeModalOnOverlay = (evt) => {\n  if (evt.target === evt.currentTarget) {\n    closeModal(evt.currentTarget);\n  }\n};\n\nexport { openModal, closeModal, closeModalOnOverlay };\n","// функции работы с валидацией, переделал согласно чек-листу\n// функция инициализирует процесс валидации всех форм\nconst enableValidation = (validationConfig) => {\n  const formList = Array.from(\n      document.querySelectorAll(validationConfig.formSelector)\n  );\n  formList.forEach((formElement) => {\n      setEventListeners(\n          formElement,\n          validationConfig.inputSelector,\n          validationConfig.inputErrorClass,\n          validationConfig.errorClass,\n          validationConfig.submitButtonSelector,\n          validationConfig.inactiveButtonClass\n      );\n  });\n};\n//Выводит сообщение об ошибке для конкретного поля ввода\nconst showInputError = (\n  formElement,\n  inputElement,\n  errorMessage,\n  inputErrorClass,\n  errorClass\n) => {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`)\n  inputElement.classList.add(inputErrorClass)\n  errorElement.textContent = errorMessage\n  errorElement.classList.add(errorClass)\n}\n//Скрывает сообщение об ошибке для конкретного поля ввода\nconst hideInputError = (\n  formElement,\n  inputElement,\n  inputErrorClass,\n  errorClass\n) => {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`)\n  inputElement.classList.remove(inputErrorClass)\n  errorElement.textContent = ''\n  errorElement.classList.remove(errorClass)\n}\n//Проверяет актуальность значения поля ввода\nconst checkInputValidity = (\n  formElement,\n  inputElement,\n  inputErrorClass,\n  errorClass\n) => {\n  if (inputElement.validity.patternMismatch) {\n      inputElement.setCustomValidity(inputElement.dataset.errorMessage)\n  } else {\n      inputElement.setCustomValidity('')\n  }\n\n  if (!inputElement.validity.valid) {\n      showInputError(\n          formElement,\n          inputElement,\n          inputElement.validationMessage,\n          inputErrorClass,\n          errorClass\n      )\n  } else {\n      hideInputError(formElement, inputElement, inputErrorClass, errorClass)\n  }\n}\n//обавляет слушатели событий для каждого поля ввода формы\nconst setEventListeners = (\n  formElement,\n  inputSelector,\n  inputErrorClass,\n  errorClass,\n  submitButtonSelector,\n  inactiveButtonClass\n) => {\n  const inputList = Array.from(formElement.querySelectorAll(inputSelector))\n  const buttonElement = formElement.querySelector(submitButtonSelector)\n  toggleButtonState(inputList, buttonElement, inactiveButtonClass)\n  inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n          checkInputValidity(\n              formElement,\n              inputElement,\n              inputErrorClass,\n              errorClass\n          )\n          toggleButtonState(inputList, buttonElement, inactiveButtonClass)\n      })\n  })\n}\n//Проверяет, есть ли невалидные поля ввода в списке. Возвращает true, если хотя бы одно поле невалидно\nconst hasInvalidInput = (inputList) => {\n  return inputList.some((inputElement) => {\n      return !inputElement.validity.valid\n  })\n}\n//Изменяет состояние кнопки отправки формы на основе валидности всех полей ввода\nconst toggleButtonState = (inputList, buttonElement, inactiveButtonClass) => {\n  if (hasInvalidInput(inputList)) {\n      buttonElement.classList.add(inactiveButtonClass)\n      buttonElement.disabled = true\n  } else {\n      buttonElement.classList.remove(inactiveButtonClass)\n      buttonElement.disabled = false\n  }\n}\n// Очищает валидацию для формы, скрывая все ошибки и сбрасывая состояние поля ввода\nconst clearValidation = (formElement, validationConfig) => {\n  const inputList = Array.from(\n    formElement.querySelectorAll(validationConfig.inputSelector)\n  );\n\n  // Очищаем поля ввода от ошибок\n  inputList.forEach((inputElement) => {\n    inputElement.classList.remove(validationConfig.inputErrorClass);\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    errorElement.textContent = '';\n  });\n\n  const buttonElement = formElement.querySelector(\n    validationConfig.submitButtonSelector\n  );\n\n  // Используем toggleButtonState для управления состоянием кнопки\n  toggleButtonState(inputList, buttonElement, validationConfig.inactiveButtonClass);\n}\n\n\n\nexport { enableValidation, clearValidation }\n"],"names":["userId","config","baseUrl","headers","authorization","getResponseData","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","likeCard","likeButton","likeCountElement","cardId","classList","contains","fetch","method","then","deleteLike","remove","textContent","likes","length","catch","err","console","log","putLike","add","openModal","element","addEventListener","closeModalOnEscape","closeModal","removeEventListener","evt","key","currentPopup","closeModalOnOverlay","target","currentTarget","toggleButtonState","inputList","buttonElement","inactiveButtonClass","some","inputElement","validity","valid","hasInvalidInput","disabled","clearValidation","formElement","validationConfig","Array","from","querySelectorAll","inputSelector","forEach","inputErrorClass","id","submitButtonSelector","placesList","popupProfile","popupProfileForm","forms","profileTitle","profileDescription","profileAvatar","profileEditButton","newCardButton","popupNewCard","popupNewCardForm","popupImageElement","popupImage","popupCaption","popupAvatar","popupAvatarForm","avatarEditButton","popupConfirm","popupConfirmButton","formSelector","errorClass","cardToDelete","cardIdToDelete","deleteCard","closest","renderCard","item","container","openFullImageFn","place","arguments","undefined","cardElement","cardData","deleteCardFn","cloneNode","cardDeleteButton","cardLikeButton","cardImage","cardTitle","cardLikeCount","src","link","alt","name","like","_id","owner","title","createCard","append","prepend","renderLoading","isLoading","button","fillProfileInfo","userInfo","about","style","backgroundImage","avatar","openImagePopup","imageData","form","description","elements","value","userProfileData","preventDefault","body","JSON","stringify","updatedProfile","finally","reset","avatarLink","newCard","result","all","initialCards","card","renderInitialCards","patternMismatch","setCustomValidity","dataset","errorMessage","errorElement","hideInputError","showInputError","validationMessage","checkInputValidity","setEventListeners","enableValidation"],"sourceRoot":""}